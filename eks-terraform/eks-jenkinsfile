pipeline {
    agent any
    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Choose Terraform action: apply or destroy')
    }
    environment {
        TERRAFORM_DIR = 'eks-terraform' // Define Terraform working directory
    }
    stages {
        stage('Checkout from Git') {
            steps {
                script {
                    echo 'Checking out Git repository...'
                    checkout scm
                }
            }
        }
        stage('Verify Terraform Installation') {
            steps {
                script {
                    echo 'Checking Terraform version...'
                    sh 'terraform --version || { echo "Terraform not found!"; exit 1; }'
                }
            }
        }
        stage('Terraform Init') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform init --reconfigure'
                }
            }
        }
        stage('Terraform Validate') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform validate'
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh 'terraform plan'
                }
            }
        }
        stage('Terraform Apply/Destroy') {
            when {
                expression { params.ACTION == 'apply' || params.ACTION == 'destroy' }
            }
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh "terraform ${params.ACTION} -auto-approve"
                }
            }
        }
    }
}
